class One‚ÇÅ (Œ± : Type) where
  /-- The element one -/
  one : Œ±

#check One‚ÇÅ.one -- One‚ÇÅ.one {Œ± : Type} [self : One‚ÇÅ Œ±] : Œ±

@[class] structure One‚ÇÇ (Œ± : Type) where
  /-- The element one -/
  one : Œ±

#check One‚ÇÇ.one

example (Œ± : Type) [One‚ÇÅ Œ±] : Œ± := One‚ÇÅ.one

example (Œ± : Type) [One‚ÇÅ Œ±] := (One‚ÇÅ.one : Œ±)

@[inherit_doc]
notation "ùüô" => One‚ÇÅ.one

example {Œ± : Type} [One‚ÇÅ Œ±] : Œ± := ùüô

example {Œ± : Type} [One‚ÇÅ Œ±] : (ùüô : Œ±) = ùüô := rfl

class Dia‚ÇÅ (Œ± : Type) where
  dia : Œ± ‚Üí Œ± ‚Üí Œ±

infixl:70 " ‚ãÑ "   => Dia‚ÇÅ.dia

class Semigroup‚ÇÅ (Œ± : Type) where
  toDia‚ÇÅ : Dia‚ÇÅ Œ±
  /-- Diamond is associative -/
  dia_assoc : ‚àÄ a b c : Œ±, a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c)

attribute [instance] Semigroup‚ÇÅ.toDia‚ÇÅ

example {Œ± : Type} [Semigroup‚ÇÅ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b

class Semigroup‚ÇÇ (Œ± : Type) extends Dia‚ÇÅ Œ± where
  /-- Diamond is associative -/
  dia_assoc : ‚àÄ a b c : Œ±, a ‚ãÑ b ‚ãÑ c = a ‚ãÑ (b ‚ãÑ c)

example {Œ± : Type} [Semigroup‚ÇÇ Œ±] (a b : Œ±) : Œ± := a ‚ãÑ b

class DiaOneClass‚ÇÅ (Œ± : Type) extends One‚ÇÅ Œ±, Dia‚ÇÅ Œ± where
  /-- One is a left neutral element for diamond. -/
  one_dia : ‚àÄ a : Œ±, ùüô ‚ãÑ a = a
  /-- One is a right neutral element for diamond -/
  dia_one : ‚àÄ a : Œ±, a ‚ãÑ ùüô = a

set_option trace.Meta.synthInstance true in
example {Œ± : Type} [DiaOneClass‚ÇÅ Œ±] (a b : Œ±) : Prop := a ‚ãÑ b = ùüô

class Monoid‚ÇÅ (Œ± : Type) extends Semigroup‚ÇÅ Œ±, DiaOneClass‚ÇÅ Œ±

class Monoid‚ÇÇ (Œ± : Type) where
  toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±
  toDiaOneClass‚ÇÅ : DiaOneClass‚ÇÅ Œ±


example {Œ± : Type} [Monoid‚ÇÅ Œ±] :
  (Monoid‚ÇÅ.toSemigroup‚ÇÅ.toDia‚ÇÅ.dia : Œ± ‚Üí Œ± ‚Üí Œ±) = Monoid‚ÇÅ.toDiaOneClass‚ÇÅ.toDia‚ÇÅ.dia := rfl

  /- Monoid‚ÇÇ.mk {Œ± : Type} (toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±) (toDiaOneClass‚ÇÅ : DiaOneClass‚ÇÅ Œ±) : Monoid‚ÇÇ Œ± -/
#check Monoid‚ÇÇ.mk

/- Monoid‚ÇÅ.mk {Œ± : Type} [toSemigroup‚ÇÅ : Semigroup‚ÇÅ Œ±] [toOne‚ÇÅ : One‚ÇÅ Œ±] (one_dia : ‚àÄ (a : Œ±), ùüô ‚ãÑ a = a) (dia_one : ‚àÄ (a : Œ±), a ‚ãÑ ùüô = a) : Monoid‚ÇÅ Œ± -/
#check Monoid‚ÇÅ.mk

#check Monoid‚ÇÅ.toSemigroup‚ÇÅ
#check Monoid‚ÇÅ.toDiaOneClass‚ÇÅ

class Inv‚ÇÅ (Œ± : Type) where
  /-- The inversion function -/
  inv : Œ± ‚Üí Œ±

@[inherit_doc]
postfix:max "‚Åª¬π" => Inv‚ÇÅ.inv

class Group‚ÇÅ (G : Type) extends Monoid‚ÇÅ G, Inv‚ÇÅ G where
  inv_dia : ‚àÄ a : G, a‚Åª¬π ‚ãÑ a = ùüô

  lemma left_inv_eq_right_inv‚ÇÅ {M : Type} [Monoid‚ÇÅ M] {a b c : M} (hba : b ‚ãÑ a = ùüô) (hac : a ‚ãÑ c = ùüô) : b = c := by
  rw [‚Üê DiaOneClass‚ÇÅ.one_dia c, ‚Üê hba, Semigroup‚ÇÅ.dia_assoc, hac, DiaOneClass‚ÇÅ.dia_one b]


lemma map_inv_of_inv [Monoid M] [Monoid N] [MonoidHomClass‚ÇÇ F M N] (f : F) {m m' : M} (h : m*m' = 1) :
    f m * f m' = 1 := by
  rw [‚Üê MonoidHomClass‚ÇÇ.map_mul, h, MonoidHomClass‚ÇÇ.map_one]

example [Monoid M] [Monoid N] (f : MonoidHom‚ÇÅ M N) {m m' : M} (h : m*m' = 1) : f m * f m' = 1 :=
map_inv_of_inv f h

example [Ring R] [Ring S] (f : RingHom‚ÇÅ R S) {r r' : R} (h : r*r' = 1) : f r * f r' = 1 :=
map_inv_of_inv f h

class MonoidHomClass‚ÇÉ (F : Type) (M N : outParam Type) [Monoid M] [Monoid N] extends
    FunLike F M (fun _ ‚Ü¶ N) where
  map_one : ‚àÄ f : F, f 1 = 1
  map_mul : ‚àÄ (f : F) g g', f (g * g') = f g * f g'

instance (M N : Type) [Monoid M] [Monoid N] : MonoidHomClass‚ÇÉ (MonoidHom‚ÇÅ M N) M N where
  coe := MonoidHom‚ÇÅ.toFun
  coe_injective' := MonoidHom‚ÇÅ.ext
  map_one := MonoidHom‚ÇÅ.map_one
  map_mul := MonoidHom‚ÇÅ.map_mul


@[ext]
structure OrderPresHom (Œ± Œ≤ : Type) [LE Œ±] [LE Œ≤] where
  toFun : Œ± ‚Üí Œ≤
  le_of_le : ‚àÄ a a', a ‚â§ a' ‚Üí toFun a ‚â§ toFun a'

@[ext]
structure OrderPresMonoidHom (M N : Type) [Monoid M] [LE M] [Monoid N] [LE N] extends
MonoidHom‚ÇÅ M N, OrderPresHom M N

class OrderPresHomClass (F : Type) (Œ± Œ≤ : outParam Type) [LE Œ±] [LE Œ≤]

instance (Œ± Œ≤ : Type) [LE Œ±] [LE Œ≤] : OrderPresHomClass (OrderPresHom Œ± Œ≤) Œ± Œ≤ where

instance (Œ± Œ≤ : Type) [LE Œ±] [Monoid Œ±] [LE Œ≤] [Monoid Œ≤] :
    OrderPresHomClass (OrderPresMonoidHom Œ± Œ≤) Œ± Œ≤ where

instance (Œ± Œ≤ : Type) [LE Œ±] [Monoid Œ±] [LE Œ≤] [Monoid Œ≤] :
    MonoidHomClass‚ÇÉ (OrderPresMonoidHom Œ± Œ≤) Œ± Œ≤
  := sorry







@[ext]
structure Submonoid‚ÇÅ (M : Type) [Monoid M] where
  /-- The carrier of a submonoid. -/
  carrier : Set M
  /-- The product of two elements of a submonoid belongs to the submonoid. -/
  mul_mem {a b} : a ‚àà carrier ‚Üí b ‚àà carrier ‚Üí a * b ‚àà carrier
  /-- The unit element belongs to the submonoid. -/
  one_mem : 1 ‚àà carrier

/-- Submonoids in `M` can be seen as sets in `M`. -/
instance [Monoid M] : SetLike (Submonoid‚ÇÅ M) M where
  coe := Submonoid‚ÇÅ.carrier
  coe_injective' := Submonoid‚ÇÅ.ext

example [Monoid M] (N : Submonoid‚ÇÅ M) : 1 ‚àà N := N.one_mem

example [Monoid M] (N : Submonoid‚ÇÅ M) : 1 ‚àà N := N.one_mem

example [Monoid M] (N : Submonoid‚ÇÅ M) (Œ± : Type) (f : M ‚Üí Œ±) := f '' N

example [Monoid M] (N : Submonoid‚ÇÅ M) (Œ± : Type) (f : M ‚Üí Œ±) := f '' N
